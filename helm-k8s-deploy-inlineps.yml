parameters:
  - name: environment
    type: string
    default: ''
  - name: serviceConnection
    type: string
    default: ''
  - name: aksCluster
    type: string
    default: ''
  - name: aksRgName
    type: string
    default: ''
  - name: k8sNamespace
    type: string
    default: ''
  - name: helmReleaseName
    type: string
    default: ''
  - name: helmChartPath
    type: string
    default: ''
  - name: helmValuesFile
    type: string
    default: ''
  - name: helmArguments
    type: string
    default: ''
  - name: helmRepoTag
    type: string
    default: ''

steps:

- task: AzureCLI@2
  displayName: Clone Helm Chart Repo & Deploy
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    addSpnToEnvironment: true
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Use GitHub PAT from variable group
      $github_pat = "$env:github_pat"

      # Clone Helm chart repo
      $repoUrl = "https://$github_pat@github.com/GoodRx/gdrx-helm-charts.git"
      $destination = "$(Build.SourcesDirectory)/sysops/helm/gdrx-helm-charts"

      Write-Host "Cloning Helm chart repo from $repoUrl"
      git clone --branch ${{ parameters.helmRepoTag }} $repoUrl temp-charts
      New-Item -ItemType Directory -Force -Path $destination | Out-Null
      Copy-Item -Path "temp-charts/*" -Destination $destination -Recurse -Force
      Remove-Item -Recurse -Force temp-charts

      # Authenticate to AKS
      $aksCluster = az aks show -n "${{ parameters.aksCluster }}" -g "${{ parameters.aksRgName }}"
      if ($aksCluster) {
        az aks get-credentials -n "${{ parameters.aksCluster }}" -g "${{ parameters.aksRgName }}" --overwrite-existing

        if ("${{ parameters.serviceConnection }}" -like "*Managed Identity*") {
          kubelogin convert-kubeconfig -l msi
        } else {
          kubelogin convert-kubeconfig -l spn --client-id $env:servicePrincipalId --client-secret $env:servicePrincipalKey --tenant-id $env:tenantId
        }
      } else {
        Write-Host "AKS Cluster does not exist in the specified resource group."
        exit 1
      }

      # Create RBAC for helm secret read access (if not exists)
      $rbac = @"
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: helm-secret-reader
  namespace: ${{ parameters.k8sNamespace }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
"@
      $rbac | Out-File rbac.yaml -Encoding utf8
      kubectl apply -f rbac.yaml

      # Deploy with Helm
      helm upgrade --install "${{ parameters.helmReleaseName }}" `
        -f "${{ parameters.helmValuesFile }}" `
        --namespace "${{ parameters.k8sNamespace }}" `
        ${{ parameters.helmArguments }} `
        "${{ parameters.helmChartPath }}"

- task: AzureCLI@2
  displayName: Debug Output
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    addSpnToEnvironment: true
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Show all namespaces
      kubectl get ns

      # Show all charts installed
      helm ls -A

      # Show all charts in target namespace
      helm ls -n "${{ parameters.k8sNamespace }}"

      # Show pods and svc
      kubectl get pods -n "${{ parameters.k8sNamespace }}"
      kubectl get svc -n "${{ parameters.k8sNamespace }}"
